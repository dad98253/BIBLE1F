	PROGRAM QSORT
C
	PARAMETER ( ISTKSZ = 64 )
	INTEGER*2 ISTACK
	INTEGER*1 IPS
	COMMON /STACK/ ISTACK(ISTKSZ) , IPS
C
	INTEGER*2 I2RIT , I2LEFT
	COMMON /BUBL/ I2RIT , I2LEFT
C
	PARAMETER ( ISIZ = 32 000 )
	INTEGER*2 IA1 , IA2
	COMMON /ARAY/ IA1(ISIZ),IA2(ISIZ)
C
	COMMON /LINC/ ICU , NUMLIN
C
	INTEGER*2 I2ZERO,I2PIV,I1,I2,I3,I3S,I4,I2PIV2
	INTEGER*2 I4S,I2TEMP,ITHRES,POP,LENRS,NUMLU
	INTEGER*1 I1ONE
C
	DIMENSION LENRS (2,200)
	DIMENSION NUMLU(2)
C
	LOGICAL IEND
C
	PARAMETER ( ITHRES = 7 )
C
	CHARACTER*80 FNAME
C
C	WRITE ( * , * ) ' ENTER INPUT FILE NAME :'
C	READ ( * , '(A)' ) FNAME
C	WRITE ( * , * ) ' ENTER CERT FLAG VALUE :'
C	READ ( * , * ) ICERT
	FNAME = 'SORTFILE.DAT'
	ICERT = 0
	IBLKSZ = ISIZ
	IF ( ICERT .NE. 0 ) THEN
	    WRITE ( * , * ) ' ENTER BLOCK SIZE :'
	    READ ( * , * ) IBLKSZ
	    WRITE ( * , * ) ' ENTER ELEMENT TRAP VALUE :'
	    READ ( * , * ) ITRAP
	END IF
	OPEN ( UNIT = 1 , FILE = 'TAPE1.DAT' , STATUS = 'UNKNOWN'
     +	       , FORM = 'UNFORMATTED' , BLOCKSIZE = 60 000 )
	OPEN ( UNIT = 2 , FILE = 'TAPE2.DAT' , STATUS = 'UNKNOWN'
     +	       , FORM = 'UNFORMATTED' , BLOCKSIZE = 60 000 )
	OPEN ( UNIT = 3 , FILE = FNAME , STATUS = 'OLD'
     +	       , FORM = 'UNFORMATTED' , BLOCKSIZE = 60 000 )
C
	IUNIT1 = 1
	IUNIT2 = 2
	IPS = 0
	I1ONE = 1
	I2ZERO = 0
	IB = 1
	ICU = 6
	NUMLIN = 0
	NUMLU(1) = 0
	NUMLU(2) = 0
C
    1	CONTINUE
	IEND = .TRUE.
	DO 100 I = 1 , IBLKSZ - 1
	READ ( 3 , END = 200 ) IA1(I) , IA2(I)
	ISAVE = I
  100	CONTINUE
	IEND = .FALSE.
  200	CONTINUE
	IA1(ISAVE+1) = 32 000
C
	CALL PUSH ( I2ZERO )
	CALL PUSH ( I2ZERO )
	I2LEFT = 1
	I2RIT = ISAVE
	CALL PUSH ( I2LEFT )
	CALL PUSH ( I2RIT )
C
  300	CONTINUE
	I2RIT = POP ( I1ONE )
	I2LEFT = POP ( I1ONE )
	IF ( ICERT .EQ. 1 ) THEN
	    WRITE ( ICU , * ) ' I2RIT,I2LEFT =' , I2RIT , I2LEFT
	    CALL LINCNT
	    WRITE ( ICU , * ) ' I2PIV = ' , IA1(I2LEFT)
	    IF ( I2PIV .EQ. ITRAP ) WRITE ( * , 399 ) ITRAP
  399	    FORMAT ( 30('*') , ' TRAPPED ' , I10 , 30('*') )
	    CALL LINCNT
	END IF
	IF ( I2LEFT .EQ. I2ZERO ) GO TO 900
C
	IF ( I2RIT - I2LEFT .LT. ITHRES ) THEN
	    CALL BUBUP
	    GO TO 300
	END IF
C
	I2PIV = IA1(I2LEFT)
	I2PIV2 = IA2(I2LEFT)
	I1 = I2LEFT + 1
	I2 = I2RIT
C
  400	CONTINUE
	IF ( ICERT .EQ. 1 ) THEN
	    WRITE ( ICU , * ) ' SCANNING LEFT TO RIGHT'
	    CALL LINCNT
	END IF
	DO 500 I3 = I1 , I2
	    IF ( ICERT .EQ. 1 ) THEN
		WRITE ( ICU , * ) I3 , IA1(I3)
		CALL LINCNT
	    END IF
	    I3S = I3
	    IF ( IA1(I3) - I2PIV ) 500 , 450 , 600
  450	    CONTINUE
		IF ( IA2(I3) .GT. I2PIV2 ) GO TO 600
  500	CONTINUE
	I3S = I3S + 1
C
  600	CONTINUE
	IF ( ICERT .EQ. 1 ) THEN
	    WRITE ( ICU , * ) ' SCANNING RIGHT TO LEFT'
	    CALL LINCNT
	END IF
	DO 700 I4 = I2 , I1 , -1
	    IF ( ICERT .EQ. 1 ) THEN
		WRITE ( ICU , * ) I4 , IA1(I4)
		CALL LINCNT
	    END IF
	    I4S = I4
	    IF ( IA1(I4) - I2PIV ) 800 , 650 , 700
  650	    CONTINUE
		IF ( IA2(I4) .LE. I2PIV2 ) GO TO 800
  700	CONTINUE
	I4S = I4S - 1
C
  800	CONTINUE
	IF ( I3S .GT. I4S ) THEN
C
C ..................  CHECK FOR ALL = HERE ????... OR AT THE TOP ^^^???.....
C
	    IA1(I2LEFT) = IA1(I4S)
	    IA1(I4S) = I2PIV
	    I2TEMP = IA2(I4S)
	    IA2(I4S) = IA2(I2LEFT)
	    IA2(I2LEFT) = I2TEMP
	    IF ( ICERT .EQ. 1 ) THEN
		WRITE ( ICU , * ) ' DONE SCANNING, SWAP PIVOT TO CENTER'
		CALL LINCNT
		WRITE ( ICU , * ) ' NEW LEFT = ' , IA1(I2LEFT) ,
     +						   IA2(I2LEFT)
		CALL LINCNT
		WRITE ( ICU , * ) ' NEW CENTER = ' , IA1(I4S) ,
     +						     IA2(I4S)
		CALL LINCNT
	    END IF
	    I2 = I4S - 1
	    I3 = I4S + 1
	    IF ( I4S - I2LEFT .GT. I2RIT - I4S ) THEN
		IF ( I2 .GT. I2LEFT ) THEN
		    CALL PUSH ( I2LEFT )
		    CALL PUSH ( I2 )
		END IF
		IF ( I2RIT .GT. I3 ) THEN
		    CALL PUSH ( I3 )
		    CALL PUSH ( I2RIT )
		END IF
		GO TO 300
	    ELSE
		IF ( I2RIT .GT. I3 ) THEN
		    CALL PUSH ( I3 )
		    CALL PUSH ( I2RIT )
		END IF
		IF ( I2 .GT. I2LEFT ) THEN
		    CALL PUSH ( I2LEFT )
		    CALL PUSH ( I2 )
		END IF
		GO TO 300
	    END IF
	ELSE
	    I2TEMP = IA1(I4S)
	    IA1(I4S) = IA1(I3S)
	    IA1(I3S) = I2TEMP
	    I2TEMP = IA2(I4S)
	    IA2(I4S) = IA2(I3S)
	    IA2(I3S) = I2TEMP
	    IF ( ICERT .EQ. 1 ) THEN
		WRITE ( ICU , * ) ' NEW LEFT = ' , I3S , IA1(I3S) ,
     +							 IA2(I3S)
		CALL LINCNT
		WRITE ( ICU , * ) ' NEW RIGHT = ' , I4S , IA1(I4S) ,
     +							  IA2(I4S)
		CALL LINCNT
	    END IF
	    I3S = I3S + 1
	    I1 = I3S
	    I4S = I4S - 1
	    I2 = I4S
	    IF ( I3S .GT. I4S ) GO TO 800
	    GO TO 400
	END IF
  900	CONTINUE
C
	IF ( ICERT .NE. 0 ) THEN
	    WRITE ( 6 , 925 ) IB
  925	FORMAT ( ' *************************  BLOCK =' , I10 ,
     +	' *****************' )
	    CALL LINCNT
	END IF
	WRITE ( * , 930 ) IB
  930	FORMAT ( 1H+ , ' BLOCK NUMBER' , I10 , ' COMPLETED' )
	IOLD = 0
	DO 1000 I = 1 , ISAVE
	WRITE ( IUNIT1 ) IA1(I) , IA2(I)
	IF ( IA1(I) .LT. IOLD ) THEN
	    WRITE ( * , * ) ' ELEMENT OUT OF ORDER: I,IA1(I)= ' , I
     +			    , IA1(I)
	    CALL LINCNT
	END IF
	IOLD = IA1(I)
	IF ( ICERT .NE. 0 ) THEN
	    WRITE ( 6, 950 ) I , IA1(I) , IA2(I)
	    CALL LINCNT
	END IF
  950	FORMAT ( 3I10 )
 1000	CONTINUE
C
	WRITE ( IUNIT1 ) IA1(ISAVE+1) , IA2(ISAVE+1)
	NUMLU(IUNIT1) = NUMLU(IUNIT1) + 1
	KIND = NUMLU(IUNIT1)
	LENRS(IUNIT1,KIND) = ISAVE
	IB = IB + 1
	ITEMP = IUNIT1
	IUNIT1 = IUNIT2
	IUNIT2 = ITEMP
	IF ( .NOT. IEND ) GO TO 1
C
	CLOSE ( UNIT = 1 , STATUS = 'KEEP' )
	CLOSE ( UNIT = 2 , STATUS = 'KEEP' )
	CLOSE ( UNIT = 3 , STATUS = 'KEEP' )
C
	OPEN ( UNIT = 4 , FILE = 'MERGE.DAT' , STATUS = 'UNKNOWN' )
	WRITE ( 4 , 2000 ) ISIZ , NUMLU(1) + NUMLU(2) , NUMLU(1)
     +			 , NUMLU(2)
 2000	FORMAT ( 8I10 )
	ILIN = MAX ( NUMLU(1) , NUMLU(2) )
	DO 2100 I = 1 , ILIN
	    WRITE ( 4 , 2000 ) ( LENRS(J,I),J=1,2 )
 2100	CONTINUE
	CLOSE ( UNIT = 4 , STATUS = 'KEEP' )
C
	END
	SUBROUTINE PUSH ( IVAL )
C
	PARAMETER ( ISTKSZ = 64 )
	INTEGER*2 ISTACK
	INTEGER*1 IPS
	COMMON /STACK/ ISTACK(ISTKSZ) , IPS
C
	INTEGER*2 IVAL
C
	IPS = IPS + 1
	IF ( IPS .GT. ISTKSZ ) THEN
C
C THIS ERROR IS IMPOSSIBLE GIVEN THE CURRENT MEMORY LIMITATIONS OF THE PC
C
	    PRINT * , ' ERROR : STACK OVERFLOW IN SUBROUTINE PUSH'
	    STOP 64
	END IF
	ISTACK(IPS) = IVAL
C
	R E T U R N
C
	END
	INTEGER*2 FUNCTION POP ( INUM )
C
	PARAMETER ( ISTKSZ = 64 )
	INTEGER*2 ISTACK
	INTEGER*1 IPS
	COMMON /STACK/ ISTACK(ISTKSZ) , IPS
C
	INTEGER*1 INUM
C
	IPS = IPS - INUM + 1
	IF ( IPS .LE. 0 ) THEN
C
C THIS ERROR SHOULD ALSO BE IMPOSSIBLE
C
	    PRINT * , ' ERROR : STACK UNDERFLOW IN SUBROUTINE POP'
	    STOP 46
	END IF
	POP = ISTACK(IPS)
	IPS = IPS - 1
C
	R E T U R N
C
	END
	SUBROUTINE BUBUP
C
	INTEGER*2 I2RIT , I2LEFT
	COMMON /BUBL/ I2RIT , I2LEFT
C
	PARAMETER ( ISIZ = 32 000 )
	INTEGER*2 IA1 , IA2
	COMMON /ARAY/ IA1(ISIZ),IA2(ISIZ)
C
	INTEGER*2 I2 , IS , IT
C
C	IF ( I2RIT - I2LEFT .EQ. 1 ) R E T U R N
C
	DO 400 I2 = I2LEFT , I2RIT - 1
	    IS = IA1(I2)
	    DO 300 I3 = I2 + 1 , I2RIT
		IF ( IA1(I3) - IS ) 100 , 200 , 300
  100		CONTINUE
		    IA1(I2) = IA1(I3)
		    IA1(I3) = IS
		    IS = IA1(I2)
		    IT = IA2(I2)
		    IA2(I2) = IA2(I3)
		    IA2(I3) = IT
		    GO TO 300
  200		CONTINUE
		    IF ( IA2(I3) .LT. IA2(I2) ) GO TO 100
  300	    CONTINUE
C
  400	CONTINUE
C
	R E T U R N
C
	END
	SUBROUTINE LINCNT
	COMMON /LINC/ ICU , NUMLIN
	NUMLIN = NUMLIN + 1
	IF ( MOD ( NUMLIN , 11 ) .NE. 0 ) R E T U R N
	IF ( ICU .EQ. 6 ) READ ( * , * )
	R E T U R N
	END
